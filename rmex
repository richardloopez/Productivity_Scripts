#!/usr/bin/env python3

# Author: Richard Lopez Corbalan
# GitHub: github.com/richardloopez
# Citation: If you use this code, please cite Lopez-Corbalan, R.

import os
import shutil
import sys

def print_help():
    help_text = """
Usage: rmex [FLAGS] [EXCEPTIONS...]

Flags:
  -rf : Delete folders except specified exceptions
  -rd : Delete files except specified exceptions

Safety Features:
  - Preview before deletion
  - Manual confirmation required
  - Type validation for exceptions

Examples:
  rmex -rf -rd Project report.txt  # Keep folder and file
  rmex -rd *.pdf                    # Keep PDFs, delete other files
  rmex -rf temp_data               # Keep folder, delete others
"""
    print(help_text)

def validate_arguments(flags, exceptions):
    valid_flags = {"-rf", "-rd"}
    invalid_flags = [f for f in flags if f not in valid_flags]
    if invalid_flags:
        print(f"Error: Invalid flags {invalid_flags}")
        return False

    for ex in exceptions:
        if not os.path.exists(ex):
            continue  # Allow non-existent exceptions (might be pattern)
        
        is_file = os.path.isfile(ex)
        is_dir = os.path.isdir(ex)
        valid_for_any = False
        
        if "-rf" in flags and is_dir:
            valid_for_any = True
        if "-rd" in flags and is_file:
            valid_for_any = True
            
        if not valid_for_any:
            detected_type = "file" if is_file else "folder"
            print(f"Error: '{ex}' is a {detected_type} but no matching flag provided")
            return False
            
    return True

def get_operation_plan(flags, exceptions):
    current_dir = os.getcwd()
    items = os.listdir(current_dir)
    
    delete_plan = {"files": [], "folders": []}
    keep_list = {"files": [], "folders": []}

    for item in items:
        item_path = os.path.join(current_dir, item)
        if os.path.isfile(item_path):
            if item in exceptions and "-rd" in flags:
                keep_list["files"].append(item)
            elif "-rd" in flags:
                delete_plan["files"].append(item)
        elif os.path.isdir(item_path):
            if item in exceptions and "-rf" in flags:
                keep_list["folders"].append(item)
            elif "-rf" in flags:
                delete_plan["folders"].append(item)
    
    return delete_plan, keep_list

def confirm_action(delete_plan, keep_list):
    print("\n=== DELETE PREVIEW ===")
    print(f"Keeping {len(keep_list['files'])} files: {', '.join(keep_list['files']) or 'None'}")
    print(f"Keeping {len(keep_list['folders'])} folders: {', '.join(keep_list['folders']) or 'None'}")
    print(f"\nDeleting {len(delete_plan['files'])} files: {', '.join(delete_plan['files']) or 'None'}")
    print(f"Deleting {len(delete_plan['folders'])} folders: {', '.join(delete_plan['folders']) or 'None'}")
    
    return input("\nConfirm deletion? (type 'yes' to proceed or 'no' to cancel): ").strip().lower() == "yes"

def execute_deletion(delete_plan):
    try:
        # Delete files first
        for file in delete_plan["files"]:
            if file == os.path.basename(__file__):
                print(f"Note: Self-deleting {file}")
            os.remove(file)
        
        # Delete folders
        for folder in delete_plan["folders"]:
            shutil.rmtree(folder)
            
        print("\nOperation completed. Remaining items:")
        print(os.listdir(os.getcwd()))
        
    except Exception as e:
        print(f"\nCritical error during deletion: {str(e)}")
        sys.exit(1)

def main():
    if len(sys.argv) < 2:
        print_help()
        sys.exit(1)
        
    flags = [arg for arg in sys.argv[1:] if arg.startswith("-")]
    exceptions = [arg for arg in sys.argv[1:] if not arg.startswith("-")]

    if not validate_arguments(flags, exceptions):
        print_help()
        sys.exit(1)

    delete_plan, keep_list = get_operation_plan(flags, exceptions)
    
    if not any(delete_plan.values()):
        print("Nothing to delete with current flags/exceptions")
        return

    if confirm_action(delete_plan, keep_list):
        execute_deletion(delete_plan)
    else:
        print("Deletion canceled")

if __name__ == "__main__":
    main()
